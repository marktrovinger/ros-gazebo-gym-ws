;; Auto-generated. Do not edit!


(when (boundp 'panda_gazebo::FollowJointTrajectoryResult)
  (if (not (find-package "PANDA_GAZEBO"))
    (make-package "PANDA_GAZEBO"))
  (shadow 'FollowJointTrajectoryResult (find-package "PANDA_GAZEBO")))
(unless (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT")
  (make-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))

(in-package "ROS")
;;//! \htmlinclude FollowJointTrajectoryResult.msg.html


(intern "*SUCCESSFUL*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*SUCCESSFUL* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*SUCCESSFUL* 0)
(intern "*INVALID_GOAL*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*INVALID_GOAL* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*INVALID_GOAL* -1)
(intern "*INVALID_JOINTS*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*INVALID_JOINTS* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*INVALID_JOINTS* -2)
(intern "*OLD_HEADER_TIMESTAMP*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*OLD_HEADER_TIMESTAMP* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*OLD_HEADER_TIMESTAMP* -3)
(intern "*PATH_TOLERANCE_VIOLATED*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*PATH_TOLERANCE_VIOLATED* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*PATH_TOLERANCE_VIOLATED* -4)
(intern "*GOAL_TOLERANCE_VIOLATED*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*GOAL_TOLERANCE_VIOLATED* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*GOAL_TOLERANCE_VIOLATED* -5)
(intern "*ACTION_TIMEOUT*" (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(shadow '*ACTION_TIMEOUT* (find-package "PANDA_GAZEBO::FOLLOWJOINTTRAJECTORYRESULT"))
(defconstant panda_gazebo::FollowJointTrajectoryResult::*ACTION_TIMEOUT* -6)

(defun panda_gazebo::FollowJointTrajectoryResult-to-symbol (const)
  (cond
        ((= const 0) 'panda_gazebo::FollowJointTrajectoryResult::*SUCCESSFUL*)
        ((= const -1) 'panda_gazebo::FollowJointTrajectoryResult::*INVALID_GOAL*)
        ((= const -2) 'panda_gazebo::FollowJointTrajectoryResult::*INVALID_JOINTS*)
        ((= const -3) 'panda_gazebo::FollowJointTrajectoryResult::*OLD_HEADER_TIMESTAMP*)
        ((= const -4) 'panda_gazebo::FollowJointTrajectoryResult::*PATH_TOLERANCE_VIOLATED*)
        ((= const -5) 'panda_gazebo::FollowJointTrajectoryResult::*GOAL_TOLERANCE_VIOLATED*)
        ((= const -6) 'panda_gazebo::FollowJointTrajectoryResult::*ACTION_TIMEOUT*)
        (t nil)))

(defclass panda_gazebo::FollowJointTrajectoryResult
  :super ros::object
  :slots (_error_code _error_string ))

(defmethod panda_gazebo::FollowJointTrajectoryResult
  (:init
   (&key
    ((:error_code __error_code) 0)
    ((:error_string __error_string) "")
    )
   (send-super :init)
   (setq _error_code (round __error_code))
   (setq _error_string (string __error_string))
   self)
  (:error_code
   (&optional __error_code)
   (if __error_code (setq _error_code __error_code)) _error_code)
  (:error_string
   (&optional __error_string)
   (if __error_string (setq _error_string __error_string)) _error_string)
  (:serialization-length
   ()
   (+
    ;; int32 _error_code
    4
    ;; string _error_string
    4 (length _error_string)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _error_code
       (write-long _error_code s)
     ;; string _error_string
       (write-long (length _error_string) s) (princ _error_string s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _error_code
     (setq _error_code (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; string _error_string
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _error_string (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get panda_gazebo::FollowJointTrajectoryResult :md5sum-) "7ede83f5e5f5b797b4656a84d78d8305")
(setf (get panda_gazebo::FollowJointTrajectoryResult :datatype-) "panda_gazebo/FollowJointTrajectoryResult")
(setf (get panda_gazebo::FollowJointTrajectoryResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32 error_code
int32 SUCCESSFUL = 0
int32 INVALID_GOAL = -1
int32 INVALID_JOINTS = -2
int32 OLD_HEADER_TIMESTAMP = -3
int32 PATH_TOLERANCE_VIOLATED = -4
int32 GOAL_TOLERANCE_VIOLATED = -5
int32 ACTION_TIMEOUT = -6

# Human readable description of the error code. Contains complementary
# information that is especially useful when execution fails, for instance:
# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested
#   trajectory is in the past).
# - INVALID_JOINTS: The mismatch between the expected controller joints
#   and those provided in the goal.
# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint
#   violated which tolerance, and by how much.
# - ACTION_TIMEOUT: The controller failed to achieve the goal before
#   the specified timeout elapsed.
string error_string


")



(provide :panda_gazebo/FollowJointTrajectoryResult "7ede83f5e5f5b797b4656a84d78d8305")


