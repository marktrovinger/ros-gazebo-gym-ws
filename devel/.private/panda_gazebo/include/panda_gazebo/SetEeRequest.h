// Generated by gencpp from file panda_gazebo/SetEeRequest.msg
// DO NOT EDIT!


#ifndef PANDA_GAZEBO_MESSAGE_SETEEREQUEST_H
#define PANDA_GAZEBO_MESSAGE_SETEEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_gazebo
{
template <class ContainerAllocator>
struct SetEeRequest_
{
  typedef SetEeRequest_<ContainerAllocator> Type;

  SetEeRequest_()
    : ee_name()  {
    }
  SetEeRequest_(const ContainerAllocator& _alloc)
    : ee_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ee_name_type;
  _ee_name_type ee_name;





  typedef boost::shared_ptr< ::panda_gazebo::SetEeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_gazebo::SetEeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetEeRequest_

typedef ::panda_gazebo::SetEeRequest_<std::allocator<void> > SetEeRequest;

typedef boost::shared_ptr< ::panda_gazebo::SetEeRequest > SetEeRequestPtr;
typedef boost::shared_ptr< ::panda_gazebo::SetEeRequest const> SetEeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_gazebo::SetEeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_gazebo::SetEeRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetEeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ee_name == rhs.ee_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_gazebo::SetEeRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetEeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetEeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetEeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetEeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48ddab2c8bbed62c425af011a9e2a1fe";
  }

  static const char* value(const ::panda_gazebo::SetEeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48ddab2c8bbed62cULL;
  static const uint64_t static_value2 = 0x425af011a9e2a1feULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_gazebo/SetEeRequest";
  }

  static const char* value(const ::panda_gazebo::SetEeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service that can be used to set the current EE used in MoveIt.\n"
"string ee_name\n"
;
  }

  static const char* value(const ::panda_gazebo::SetEeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetEeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_gazebo::SetEeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_gazebo::SetEeRequest_<ContainerAllocator>& v)
  {
    s << indent << "ee_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ee_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_GAZEBO_MESSAGE_SETEEREQUEST_H
