// Generated by gencpp from file panda_gazebo/SetJointEffortsRequest.msg
// DO NOT EDIT!


#ifndef PANDA_GAZEBO_MESSAGE_SETJOINTEFFORTSREQUEST_H
#define PANDA_GAZEBO_MESSAGE_SETJOINTEFFORTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_gazebo
{
template <class ContainerAllocator>
struct SetJointEffortsRequest_
{
  typedef SetJointEffortsRequest_<ContainerAllocator> Type;

  SetJointEffortsRequest_()
    : joint_names()
    , joint_efforts()
    , wait(false)  {
    }
  SetJointEffortsRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)
    , joint_efforts(_alloc)
    , wait(false)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_efforts_type;
  _joint_efforts_type joint_efforts;

   typedef uint8_t _wait_type;
  _wait_type wait;





  typedef boost::shared_ptr< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointEffortsRequest_

typedef ::panda_gazebo::SetJointEffortsRequest_<std::allocator<void> > SetJointEffortsRequest;

typedef boost::shared_ptr< ::panda_gazebo::SetJointEffortsRequest > SetJointEffortsRequestPtr;
typedef boost::shared_ptr< ::panda_gazebo::SetJointEffortsRequest const> SetJointEffortsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_names == rhs.joint_names &&
    lhs.joint_efforts == rhs.joint_efforts &&
    lhs.wait == rhs.wait;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00b05a9ff266e19304a78bb6867cc4df";
  }

  static const char* value(const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00b05a9ff266e193ULL;
  static const uint64_t static_value2 = 0x04a78bb6867cc4dfULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_gazebo/SetJointEffortsRequest";
  }

  static const char* value(const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service that can be used to control the robot efforts using the panda_control_server.\n"
"# NOTE: This is done by publishing the joint efforts commands to the right topics.\n"
"string[] joint_names\n"
"float64[] joint_efforts\n"
"bool wait\n"
;
  }

  static const char* value(const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
      stream.next(m.joint_efforts);
      stream.next(m.wait);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointEffortsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_gazebo::SetJointEffortsRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "joint_efforts[]" << std::endl;
    for (size_t i = 0; i < v.joint_efforts.size(); ++i)
    {
      s << indent << "  joint_efforts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_efforts[i]);
    }
    s << indent << "wait: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_GAZEBO_MESSAGE_SETJOINTEFFORTSREQUEST_H
