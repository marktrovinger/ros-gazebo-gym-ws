// Generated by gencpp from file panda_gazebo/SetGripperWidthRequest.msg
// DO NOT EDIT!


#ifndef PANDA_GAZEBO_MESSAGE_SETGRIPPERWIDTHREQUEST_H
#define PANDA_GAZEBO_MESSAGE_SETGRIPPERWIDTHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_gazebo
{
template <class ContainerAllocator>
struct SetGripperWidthRequest_
{
  typedef SetGripperWidthRequest_<ContainerAllocator> Type;

  SetGripperWidthRequest_()
    : width(0.0)
    , grasping(false)
    , max_effort(0.0)
    , wait(false)
    , timeout()  {
    }
  SetGripperWidthRequest_(const ContainerAllocator& _alloc)
    : width(0.0)
    , grasping(false)
    , max_effort(0.0)
    , wait(false)
    , timeout()  {
  (void)_alloc;
    }



   typedef double _width_type;
  _width_type width;

   typedef uint8_t _grasping_type;
  _grasping_type grasping;

   typedef double _max_effort_type;
  _max_effort_type max_effort;

   typedef uint8_t _wait_type;
  _wait_type wait;

   typedef ros::Duration _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGripperWidthRequest_

typedef ::panda_gazebo::SetGripperWidthRequest_<std::allocator<void> > SetGripperWidthRequest;

typedef boost::shared_ptr< ::panda_gazebo::SetGripperWidthRequest > SetGripperWidthRequestPtr;
typedef boost::shared_ptr< ::panda_gazebo::SetGripperWidthRequest const> SetGripperWidthRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.grasping == rhs.grasping &&
    lhs.max_effort == rhs.max_effort &&
    lhs.wait == rhs.wait &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f982499773828152675649f173b5489";
  }

  static const char* value(const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f98249977382815ULL;
  static const uint64_t static_value2 = 0x2675649f173b5489ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_gazebo/SetGripperWidthRequest";
  }

  static const char* value(const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service that can be used to control the robot hand gripper width using the panda_control_server.\n"
"# NOTE: It serves as a small wrapper around the 'franka_gripper/move' action but automatically\n"
"# sets the speed to the maximum speed. It further clips gripper width such that it is within\n"
"# the set max/min boundaries.\n"
"float64 width       # Gripper width - ignored when the gripper is grasping.\n"
"bool grasping       # The gripper simply moves if this is `false` ignoring the 'max_effort'.\n"
"float64 max_effort  # The max effort used by the gripper.\n"
"bool wait\n"
"duration timeout # Action server timeout. If set to 0, no timeout is used and action waits indefinitely.\n"
;
  }

  static const char* value(const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.grasping);
      stream.next(m.max_effort);
      stream.next(m.wait);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGripperWidthRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_gazebo::SetGripperWidthRequest_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "grasping: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasping);
    s << indent << "max_effort: ";
    Printer<double>::stream(s, indent + "  ", v.max_effort);
    s << indent << "wait: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait);
    s << indent << "timeout: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_GAZEBO_MESSAGE_SETGRIPPERWIDTHREQUEST_H
