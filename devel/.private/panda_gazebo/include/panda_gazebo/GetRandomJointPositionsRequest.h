// Generated by gencpp from file panda_gazebo/GetRandomJointPositionsRequest.msg
// DO NOT EDIT!


#ifndef PANDA_GAZEBO_MESSAGE_GETRANDOMJOINTPOSITIONSREQUEST_H
#define PANDA_GAZEBO_MESSAGE_GETRANDOMJOINTPOSITIONSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panda_gazebo/JointLimits.h>

namespace panda_gazebo
{
template <class ContainerAllocator>
struct GetRandomJointPositionsRequest_
{
  typedef GetRandomJointPositionsRequest_<ContainerAllocator> Type;

  GetRandomJointPositionsRequest_()
    : joint_limits()
    , attempts(0)  {
    }
  GetRandomJointPositionsRequest_(const ContainerAllocator& _alloc)
    : joint_limits(_alloc)
    , attempts(0)  {
  (void)_alloc;
    }



   typedef  ::panda_gazebo::JointLimits_<ContainerAllocator>  _joint_limits_type;
  _joint_limits_type joint_limits;

   typedef int32_t _attempts_type;
  _attempts_type attempts;





  typedef boost::shared_ptr< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetRandomJointPositionsRequest_

typedef ::panda_gazebo::GetRandomJointPositionsRequest_<std::allocator<void> > GetRandomJointPositionsRequest;

typedef boost::shared_ptr< ::panda_gazebo::GetRandomJointPositionsRequest > GetRandomJointPositionsRequestPtr;
typedef boost::shared_ptr< ::panda_gazebo::GetRandomJointPositionsRequest const> GetRandomJointPositionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_limits == rhs.joint_limits &&
    lhs.attempts == rhs.attempts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ec67abe641fd6b76ccbb0f1dc3280cd";
  }

  static const char* value(const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ec67abe641fd6b7ULL;
  static const uint64_t static_value2 = 0x6ccbb0f1dc3280cdULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_gazebo/GetRandomJointPositionsRequest";
  }

  static const char* value(const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service that can be used to get valid joint positions for controlling the robot arm\n"
"# and hand.\n"
"JointLimits joint_limits\n"
"int32 attempts\n"
"\n"
"================================================================================\n"
"MSG: panda_gazebo/JointLimits\n"
"# Message used to define joint limits\n"
"string[] names\n"
"float64[] values\n"
;
  }

  static const char* value(const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_limits);
      stream.next(m.attempts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRandomJointPositionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_gazebo::GetRandomJointPositionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_limits: ";
    s << std::endl;
    Printer< ::panda_gazebo::JointLimits_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_limits);
    s << indent << "attempts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attempts);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_GAZEBO_MESSAGE_GETRANDOMJOINTPOSITIONSREQUEST_H
