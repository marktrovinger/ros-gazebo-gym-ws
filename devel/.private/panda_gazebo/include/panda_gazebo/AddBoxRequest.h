// Generated by gencpp from file panda_gazebo/AddBoxRequest.msg
// DO NOT EDIT!


#ifndef PANDA_GAZEBO_MESSAGE_ADDBOXREQUEST_H
#define PANDA_GAZEBO_MESSAGE_ADDBOXREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace panda_gazebo
{
template <class ContainerAllocator>
struct AddBoxRequest_
{
  typedef AddBoxRequest_<ContainerAllocator> Type;

  AddBoxRequest_()
    : name()
    , frame_id()
    , pose()
    , size()  {
      size.assign(0.0);
  }
  AddBoxRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , frame_id(_alloc)
    , pose(_alloc)
    , size()  {
  (void)_alloc;
      size.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef boost::array<double, 3>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddBoxRequest_

typedef ::panda_gazebo::AddBoxRequest_<std::allocator<void> > AddBoxRequest;

typedef boost::shared_ptr< ::panda_gazebo::AddBoxRequest > AddBoxRequestPtr;
typedef boost::shared_ptr< ::panda_gazebo::AddBoxRequest const> AddBoxRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_gazebo::AddBoxRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_gazebo::AddBoxRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::AddBoxRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.frame_id == rhs.frame_id &&
    lhs.pose == rhs.pose &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_gazebo::AddBoxRequest_<ContainerAllocator1> & lhs, const ::panda_gazebo::AddBoxRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54c0f9efd9caf1cab88918040a85eadc";
  }

  static const char* value(const ::panda_gazebo::AddBoxRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54c0f9efd9caf1caULL;
  static const uint64_t static_value2 = 0xb88918040a85eadcULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_gazebo/AddBoxRequest";
  }

  static const char* value(const ::panda_gazebo::AddBoxRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service that can be used to add a box to the planning scene.\n"
"string name\n"
"string frame_id\n"
"geometry_msgs/Pose pose\n"
"float64[3] size\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::panda_gazebo::AddBoxRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.frame_id);
      stream.next(m.pose);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddBoxRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_gazebo::AddBoxRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_gazebo::AddBoxRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "size[]" << std::endl;
    for (size_t i = 0; i < v.size.size(); ++i)
    {
      s << indent << "  size[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.size[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_GAZEBO_MESSAGE_ADDBOXREQUEST_H
